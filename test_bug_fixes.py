#!/usr/bin/env python
"""
Script de test automatis√© pour valider toutes les corrections de bugs
"""
import sys
import time
from playwright.sync_api import sync_playwright, expect

BASE_URL = "http://localhost:5678"
ADMIN_USER = "admin"
ADMIN_PASSWORD = "admin"

def login(page):
    """Login to the application"""
    print("üîê Connexion √† l'application...")
    page.goto(f"{BASE_URL}/auth/login/")
    page.fill('input[name="username"]', ADMIN_USER)
    page.fill('input[name="password"]', ADMIN_PASSWORD)
    page.click('button[type="submit"]')
    page.wait_for_load_state('networkidle')
    print("‚úÖ Connexion r√©ussie")

def test_rgpd_consent(page):
    """Test: RGPD consent checkbox on beneficiary creation"""
    print("\nüìã Test: Case RGPD pour le consentement")

    page.goto(f"{BASE_URL}/beneficiaires/new/")
    page.wait_for_load_state('networkidle')

    # Debug: Afficher l'URL actuelle
    print(f"  URL actuelle: {page.url}")

    # Debug: Sauvegarder une screenshot
    page.screenshot(path="/tmp/test_rgpd.png")
    print("  Screenshot sauvegard√©e dans /tmp/test_rgpd.png")

    # V√©rifier la pr√©sence de la section RGPD
    rgpd_section = page.locator('text=Protection des donn√©es personnelles')
    if not rgpd_section.is_visible():
        print(f"  ‚ö†Ô∏è  Page HTML: {page.content()[:500]}")
    assert rgpd_section.is_visible(), "Section RGPD non visible"
    print("  ‚úì Section RGPD pr√©sente")

    # V√©rifier la pr√©sence de la checkbox
    gdpr_checkbox = page.locator('input[name="gdpr_consent"]')
    assert gdpr_checkbox.is_visible(), "Checkbox RGPD non visible"
    print("  ‚úì Checkbox RGPD pr√©sente")

    # V√©rifier l'ic√¥ne de bouclier
    shield_icon = page.locator('i.fa-shield-alt')
    assert shield_icon.is_visible(), "Ic√¥ne bouclier non visible"
    print("  ‚úì Ic√¥ne de s√©curit√© pr√©sente")

    # Test: tentative de cr√©ation sans consentement (doit √©chouer)
    page.fill('input[name="first_name"]', 'Test')
    page.fill('input[name="last_name"]', 'RGPD')
    page.click('button[type="submit"]')
    time.sleep(1)

    # V√©rifier qu'on est toujours sur la page de cr√©ation (formulaire non valid√©)
    assert "/beneficiaires/new/" in page.url, "Le formulaire aurait d√ª √™tre rejet√©"
    print("  ‚úì Validation RGPD obligatoire fonctionne")

    print("‚úÖ Test RGPD: SUCC√àS")

def test_nationality_field(page):
    """Test: Nationality field in beneficiary creation"""
    print("\nüåç Test: Champ Nationalit√©")

    page.goto(f"{BASE_URL}/beneficiaires/new/")
    page.wait_for_load_state('networkidle')

    # V√©rifier la pr√©sence du champ nationalit√©
    nationality_field = page.locator('select[name="nationality"]')
    assert nationality_field.is_visible(), "Champ nationalit√© non visible"
    print("  ‚úì Champ Nationalit√© pr√©sent")

    # V√©rifier les options
    options = nationality_field.locator('option').all_inner_texts()
    assert 'Fran√ßaise' in ' '.join(options), "Option 'Fran√ßaise' manquante"
    assert 'Union Europ√©enne' in ' '.join(options), "Option 'Union Europ√©enne' manquante"
    assert 'Hors Union Europ√©enne' in ' '.join(options), "Option 'Hors Union Europ√©enne' manquante"
    print("  ‚úì Toutes les options de nationalit√© pr√©sentes")

    print("‚úÖ Test Nationalit√©: SUCC√àS")

def test_referral_source_field(page):
    """Test: Referral source field in beneficiary creation"""
    print("\nüìä Test: Champ d'adressage")

    page.goto(f"{BASE_URL}/beneficiaires/new/")
    page.wait_for_load_state('networkidle')

    # V√©rifier la pr√©sence du champ
    referral_field = page.locator('input[name="referral_source"]')
    assert referral_field.is_visible(), "Champ 'Adress√© par' non visible"
    print("  ‚úì Champ 'Adress√© par' pr√©sent")

    # V√©rifier le placeholder
    placeholder = referral_field.get_attribute('placeholder')
    assert 'Croix-Rouge' in placeholder or 'assistant social' in placeholder, "Placeholder incorrect"
    print("  ‚úì Placeholder informatif pr√©sent")

    print("‚úÖ Test Champ d'adressage: SUCC√àS")

def test_create_beneficiary_with_all_fields(page):
    """Test: Create a complete beneficiary with all new fields"""
    print("\nüë§ Test: Cr√©ation compl√®te d'un b√©n√©ficiaire")

    page.goto(f"{BASE_URL}/beneficiaires/new/")
    page.wait_for_load_state('networkidle')

    # Remplir le formulaire
    page.check('input[name="gdpr_consent"]')
    print("  ‚úì Consentement RGPD coch√©")

    page.select_option('select[name="civility"]', 'M')
    page.fill('input[name="first_name"]', 'Jean')
    page.fill('input[name="last_name"]', 'DUPONT')
    page.fill('input[name="birth_date"]', '1980-05-15')

    page.select_option('select[name="nationality"]', 'FRANCAISE')
    print("  ‚úì Nationalit√© s√©lectionn√©e")

    page.fill('input[name="referral_source"]', 'Croix-Rouge')
    print("  ‚úì Source d'adressage renseign√©e")

    page.fill('input[name="phone"]', '0601020304')
    page.fill('input[name="email"]', 'jean.dupont@test.fr')

    # Soumettre le formulaire
    page.click('button[type="submit"]')
    page.wait_for_load_state('networkidle')

    # V√©rifier la redirection vers la page de d√©tail
    assert "/beneficiaires/" in page.url and "/beneficiaires/new/" not in page.url, "Pas de redirection apr√®s cr√©ation"
    print("  ‚úì B√©n√©ficiaire cr√©√© avec succ√®s")

    # V√©rifier l'affichage de la nationalit√©
    assert page.locator('text=Fran√ßaise').is_visible(), "Nationalit√© non affich√©e"
    print("  ‚úì Nationalit√© affich√©e dans le profil")

    print("‚úÖ Test Cr√©ation compl√®te: SUCC√àS")

def test_calendar_navigation(page):
    """Test: Calendar global view week navigation"""
    print("\nüìÖ Test: Navigation calendrier global")

    # D'abord cr√©er un profil volunteer pour l'admin
    page.goto(f"{BASE_URL}/benevoles/new/")
    page.wait_for_load_state('networkidle')

    # Si la page existe, remplir le formulaire
    if "new" in page.url:
        page.select_option('select[name="role"]', 'ADMIN')
        page.fill('input[name="phone"]', '0601020304')
        page.click('button[type="submit"]')
        page.wait_for_load_state('networkidle')

    # Aller au calendrier global
    page.goto(f"{BASE_URL}/calendrier/global/")
    page.wait_for_load_state('networkidle')

    # R√©cup√©rer la semaine affich√©e
    week_text = page.locator('text=/Semaine du/').inner_text()
    print(f"  ‚ÑπÔ∏è  {week_text}")

    # Tester la navigation semaine pr√©c√©dente
    page.click('a:has(i.fa-chevron-left)')
    page.wait_for_load_state('networkidle')
    new_week_text = page.locator('text=/Semaine du/').inner_text()
    assert new_week_text != week_text, "La navigation vers la semaine pr√©c√©dente ne fonctionne pas"
    print("  ‚úì Navigation semaine pr√©c√©dente: OK")

    # Tester le retour √† cette semaine
    page.click('text=Cette semaine')
    page.wait_for_load_state('networkidle')
    current_week_text = page.locator('text=/Semaine du/').inner_text()
    print("  ‚úì Retour √† la semaine actuelle: OK")

    # Tester la navigation semaine suivante
    page.click('a:has(i.fa-chevron-right)')
    page.wait_for_load_state('networkidle')
    next_week_text = page.locator('text=/Semaine du/').inner_text()
    assert next_week_text != current_week_text, "La navigation vers la semaine suivante ne fonctionne pas"
    print("  ‚úì Navigation semaine suivante: OK")

    print("‚úÖ Test Navigation calendrier: SUCC√àS")

def run_all_tests():
    """Run all tests"""
    print("=" * 60)
    print("üß™ TESTS DE VALIDATION DES CORRECTIONS")
    print("=" * 60)

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context()
        page = context.new_page()

        try:
            # Login
            login(page)

            # Run all tests
            test_rgpd_consent(page)
            test_nationality_field(page)
            test_referral_source_field(page)
            test_create_beneficiary_with_all_fields(page)
            test_calendar_navigation(page)

            print("\n" + "=" * 60)
            print("‚úÖ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!")
            print("=" * 60)
            return 0

        except Exception as e:
            print("\n" + "=" * 60)
            print(f"‚ùå √âCHEC DU TEST: {str(e)}")
            print("=" * 60)
            import traceback
            traceback.print_exc()
            return 1

        finally:
            browser.close()

if __name__ == "__main__":
    sys.exit(run_all_tests())
