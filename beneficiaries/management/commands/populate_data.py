"""
Commande Django pour populer la base de donn√©es avec des donn√©es de d√©monstration r√©alistes.

Cette commande g√©n√®re:
- Des utilisateurs avec diff√©rents r√¥les (admin, salari√©s, b√©n√©voles entretien, gouvernance)
- Des b√©n√©ficiaires avec des profils vari√©s
- Des snapshots financiers avec donn√©es partielles sur plusieurs mois
- Des cr√©neaux de disponibilit√© et rendez-vous
- Des interactions et suivis

Usage: python manage.py populate_data [--clear]
"""

import random
from datetime import datetime, date, timedelta, time
from decimal import Decimal
from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth.models import User
from django.db import transaction
from django.utils import timezone
from faker import Faker

from beneficiaries.models import Beneficiary, FinancialSnapshot, Child, Interaction
from volunteers.models import Volunteer, TimeTracking
from calendar_app.models import VolunteerCalendar, AvailabilitySlot, Appointment

fake = Faker('fr_FR')


class Command(BaseCommand):
    help = 'Peuple la base de donn√©es avec des donn√©es de d√©monstration r√©alistes'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='Efface toutes les donn√©es existantes avant de cr√©er les nouvelles',
        )
        parser.add_argument(
            '--users',
            type=int,
            default=12,
            help='Nombre d\'utilisateurs √† cr√©er (d√©faut: 12)',
        )
        parser.add_argument(
            '--beneficiaries',
            type=int,
            default=15,
            help='Nombre de b√©n√©ficiaires √† cr√©er (d√©faut: 15)',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ D√©but de la population des donn√©es de d√©monstration')
        )

        if options['clear']:
            self.clear_data()

        with transaction.atomic():
            # Cr√©er les utilisateurs et profils de b√©n√©voles
            users = self.create_users(options['users'])
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {len(users)} utilisateurs cr√©√©s')
            )

            # Cr√©er les b√©n√©ficiaires
            beneficiaries = self.create_beneficiaries(options['beneficiaries'])
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {len(beneficiaries)} b√©n√©ficiaires cr√©√©s')
            )

            # Cr√©er les snapshots financiers
            snapshots_count = self.create_financial_snapshots(beneficiaries)
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {snapshots_count} snapshots financiers cr√©√©s')
            )

            # Cr√©er les cr√©neaux de disponibilit√© et rendez-vous
            appointments_count = self.create_calendar_data(users)
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {appointments_count} rendez-vous cr√©√©s')
            )

            # Cr√©er les interactions
            interactions_count = self.create_interactions(beneficiaries, users)
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {interactions_count} interactions cr√©√©es')
            )

        self.stdout.write(
            self.style.SUCCESS('üéâ Population des donn√©es termin√©e avec succ√®s!')
        )

    def clear_data(self):
        """Efface toutes les donn√©es existantes"""
        self.stdout.write('üßπ Nettoyage des donn√©es existantes...')

        # Supprimer dans l'ordre pour √©viter les contraintes de cl√©s √©trang√®res
        Appointment.objects.all().delete()
        AvailabilitySlot.objects.all().delete()
        VolunteerCalendar.objects.all().delete()
        TimeTracking.objects.all().delete()
        Interaction.objects.all().delete()
        Child.objects.all().delete()
        FinancialSnapshot.objects.all().delete()
        Beneficiary.objects.all().delete()
        Volunteer.objects.all().delete()
        User.objects.filter(is_superuser=False).delete()

        self.stdout.write(self.style.WARNING('‚ö†Ô∏è  Donn√©es existantes supprim√©es'))

    def create_users(self, count):
        """Cr√©e des utilisateurs avec diff√©rents r√¥les"""
        users = []

        # D√©finir la r√©partition des r√¥les
        roles_distribution = [
            ('ADMIN', 1),
            ('EMPLOYEE', 2),
            ('VOLUNTEER_INTERVIEW', count - 4),
            ('VOLUNTEER_GOVERNANCE', 1),
        ]

        for role, role_count in roles_distribution:
            for i in range(role_count):
                # G√©n√©rer un utilisateur
                first_name = fake.first_name()
                last_name = fake.last_name().upper()  # Nom de famille en majuscules
                username = f"{first_name.lower()}.{last_name.lower()}"
                email = f"{username}@ona-demo.fr"

                user = User.objects.create_user(
                    username=username,
                    email=email,
                    first_name=first_name,
                    last_name=last_name,
                    password='demo123',  # Mot de passe simple pour la d√©mo
                )

                # Cr√©er le profil de b√©n√©vole associ√©
                volunteer = Volunteer.objects.create(
                    user=user,
                    civility=random.choice(['M', 'MME']),
                    birth_date=fake.date_of_birth(minimum_age=25, maximum_age=70),
                    phone=fake.phone_number(),
                    address=fake.address(),
                    role=role,
                    skills=self.generate_skills(),
                    availability=self.generate_availability(),
                    join_date=fake.date_between(start_date='-2y', end_date='today'),
                )

                # Ajouter du suivi d'heures pour certains b√©n√©voles
                if role in ['VOLUNTEER_INTERVIEW', 'EMPLOYEE']:
                    self.create_time_tracking(volunteer)

                users.append(user)

        return users

    def generate_skills(self):
        """G√©n√®re des comp√©tences r√©alistes pour un b√©n√©vole"""
        skills_pool = [
            "Accompagnement social", "Aide administrative", "Informatique",
            "Traduction (anglais, arabe, espagnol)", "Comptabilit√©",
            "Juridique", "Sant√©", "√âducation", "Cuisine", "M√©canique",
            "Jardinage", "Couture", "Formation", "Animation"
        ]
        return ", ".join(random.sample(skills_pool, random.randint(2, 4)))

    def generate_availability(self):
        """G√©n√®re des cr√©neaux de disponibilit√© textuelle"""
        days = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"]
        chosen_days = random.sample(days, random.randint(1, 3))
        times = ["9h-12h", "14h-17h", "9h-17h", "10h-16h"]
        chosen_time = random.choice(times)
        return f"{', '.join(chosen_days)} {chosen_time}"

    def create_time_tracking(self, volunteer):
        """Cr√©e des suivis d'heures mensuels pour un b√©n√©vole"""
        # Cr√©er des suivis pour les 6 derniers mois
        for i in range(6):
            month_date = date.today().replace(day=1) - timedelta(days=30*i)
            hours = random.uniform(5.0, 40.0)

            TimeTracking.objects.create(
                volunteer=volunteer,
                month=month_date,
                hours_worked=round(hours, 1),
                activities=fake.sentence(nb_words=8),
                notes=fake.sentence(nb_words=5) if random.choice([True, False]) else '',
            )

    def create_beneficiaries(self, count):
        """Cr√©e des b√©n√©ficiaires avec des profils diversifi√©s"""
        beneficiaries = []

        for i in range(count):
            civility = random.choice(['M', 'MME'])
            first_name = fake.first_name_male() if civility == 'M' else fake.first_name_female()
            last_name = fake.last_name().upper()

            beneficiary = Beneficiary.objects.create(
                civility=civility,
                first_name=first_name,
                last_name=last_name,
                birth_date=fake.date_of_birth(minimum_age=18, maximum_age=80),
                phone=fake.phone_number() if random.choice([True, False]) else '',
                email=fake.email() if random.choice([True, False]) else '',
                address=fake.address(),
                residence_address=fake.address() if random.choice([True, False]) else '',
                occupation=fake.job() if random.choice([True, False]) else '',
                housing_status=random.choice([
                    'CADA', 'CAO', 'CHRS', 'DIFFUS', 'COLLECTIF', 'QPV', 'AUTRE'
                ]),
                family_status=random.choice([
                    'CELIBATAIRE', 'MARIE', 'VEUF', 'VIE_MARITALE', 'DIVORCE', 'SEPARE'
                ]),
                dependents_count=random.randint(0, 4),
            )

            # Cr√©er des enfants pour certains b√©n√©ficiaires
            if beneficiary.dependents_count > 0:
                self.create_children(beneficiary)

            beneficiaries.append(beneficiary)

        return beneficiaries

    def create_children(self, beneficiary):
        """Cr√©e des enfants pour un b√©n√©ficiaire"""
        for i in range(beneficiary.dependents_count):
            Child.objects.create(
                beneficiary=beneficiary,
                first_name=fake.first_name(),
                last_name=beneficiary.last_name,
                birth_date=fake.date_of_birth(minimum_age=0, maximum_age=18),
                observations=fake.sentence() if random.choice([True, False]) else '',
            )

    def create_financial_snapshots(self, beneficiaries):
        """Cr√©e des snapshots financiers avec donn√©es partielles"""
        snapshots_count = 0

        for beneficiary in beneficiaries:
            # Cr√©er entre 1 et 6 mois d'historique
            months_back = random.randint(1, 6)

            for i in range(months_back):
                # Date du snapshot (premier jour du mois)
                snapshot_date = timezone.now() - timedelta(days=30*i)
                snapshot_date = snapshot_date.replace(day=1, hour=10, minute=0, second=0)

                snapshot = FinancialSnapshot.objects.create(
                    beneficiary=beneficiary,
                    date=snapshot_date,
                    **self.generate_financial_data()
                )
                snapshots_count += 1

        return snapshots_count

    def generate_financial_data(self):
        """G√©n√®re des donn√©es financi√®res r√©alistes avec des donn√©es partielles"""
        data = {}

        # Prestations sociales (certaines remplies, d'autres vides)
        if random.choice([True, False]):
            data['rsa_prime_activite'] = Decimal(str(random.uniform(400, 600)))

        if random.choice([True, False]):
            data['aah_pension_invalidite'] = Decimal(str(random.uniform(800, 900)))

        if random.choice([True, False]):
            data['apl'] = Decimal(str(random.uniform(150, 300)))

        if random.choice([True, False]):
            data['af'] = Decimal(str(random.uniform(100, 250)))

        if random.choice([True, False]):
            data['paje'] = Decimal(str(random.uniform(50, 180)))

        # Revenus du travail (plus rares)
        if random.random() < 0.3:  # 30% de chances
            data['salaire'] = Decimal(str(random.uniform(800, 1500)))

        if random.random() < 0.2:  # 20% de chances
            data['france_travail'] = Decimal(str(random.uniform(600, 1200)))

        # ADA pour certains (demandeurs d'asile)
        if random.random() < 0.15:  # 15% de chances
            data['ada'] = Decimal(str(random.uniform(200, 400)))

        # Charges (certaines toujours pr√©sentes, d'autres optionnelles)
        if random.choice([True, False]):
            data['loyer_residuel'] = Decimal(str(random.uniform(200, 500)))

        if random.choice([True, False]):
            data['energie'] = Decimal(str(random.uniform(50, 150)))

        if random.choice([True, False]):
            data['transport_commun'] = Decimal(str(random.uniform(30, 80)))

        if random.choice([True, False]):
            data['frais_scolaires'] = Decimal(str(random.uniform(20, 100)))

        # Dettes (occasionnelles)
        if random.random() < 0.3:
            data['credit_consommation'] = Decimal(str(random.uniform(100, 300)))

        if random.random() < 0.2:
            data['dettes_diverses'] = Decimal(str(random.uniform(50, 200)))

        return data

    def create_calendar_data(self, users):
        """Cr√©e des cr√©neaux de disponibilit√© et des rendez-vous"""
        appointments_count = 0

        # Filtrer les utilisateurs qui peuvent avoir des calendriers
        eligible_users = [
            user for user in users
            if hasattr(user, 'volunteer_profile') and
            user.volunteer_profile.role != 'VOLUNTEER_GOVERNANCE'
        ]

        for user in eligible_users:
            volunteer = user.volunteer_profile

            # Le calendrier est cr√©√© automatiquement par le signal
            calendar = volunteer.calendar

            # Cr√©er des cr√©neaux de disponibilit√©
            self.create_availability_slots(calendar)

            # Cr√©er des rendez-vous avec r√©partition in√©gale
            if volunteer.role == 'VOLUNTEER_INTERVIEW':
                # Certains b√©n√©voles ont beaucoup de RDV, d'autres peu
                appointments_for_volunteer = random.choices(
                    [2, 5, 8, 12, 15],
                    weights=[30, 25, 20, 15, 10]  # R√©partition in√©gale
                )[0]
            else:
                appointments_for_volunteer = random.randint(3, 8)

            appointments_count += self.create_appointments(calendar, appointments_for_volunteer)

        return appointments_count

    def create_availability_slots(self, calendar):
        """Cr√©e des cr√©neaux de disponibilit√© pour un calendrier"""
        volunteer = calendar.volunteer

        # Cr√©er 2-4 cr√©neaux r√©currents par b√©n√©vole
        num_slots = random.randint(2, 4)

        for i in range(num_slots):
            weekday = random.randint(0, 4)  # Lundi √† vendredi principalement
            start_hour = random.choice([8, 9, 10, 14, 15, 16])
            duration = random.choice([2, 3, 4])  # 2-4h de cr√©neaux

            AvailabilitySlot.objects.create(
                volunteer_calendar=calendar,
                slot_type='AVAILABILITY',
                recurrence_type='WEEKLY',
                weekday=weekday,
                start_time=time(start_hour, 0),
                end_time=time(start_hour + duration, 0),
                valid_from=date.today() - timedelta(days=30),
                valid_until=date.today() + timedelta(days=90),
                title=f"Disponibilit√© {['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'][weekday]}",
                is_bookable=True,
                max_appointments=random.choice([1, 2, 3]),
                created_by=volunteer.user,
            )

    def create_appointments(self, calendar, count):
        """Cr√©e des rendez-vous pour un calendrier"""
        beneficiaries = list(Beneficiary.objects.all())
        appointments_created = 0

        for i in range(count):
            # R√©partir les RDV entre pass√©, pr√©sent et futur
            if i < count * 0.6:  # 60% dans le pass√©
                appointment_date = fake.date_between(
                    start_date='-30d',
                    end_date='-1d'
                )
                status = random.choice(['COMPLETED', 'CANCELLED', 'NO_SHOW'])
            elif i < count * 0.8:  # 20% dans les prochains jours
                appointment_date = fake.date_between(
                    start_date='today',
                    end_date='+7d'
                )
                status = random.choice(['SCHEDULED', 'CONFIRMED'])
            else:  # 20% dans le futur
                appointment_date = fake.date_between(
                    start_date='+8d',
                    end_date='+60d'
                )
                status = 'SCHEDULED'

            start_hour = random.choice([9, 10, 11, 14, 15, 16])
            duration = random.choice([1, 1.5, 2])
            end_hour = start_hour + duration

            beneficiary = random.choice(beneficiaries)

            appointment = Appointment.objects.create(
                volunteer_calendar=calendar,
                beneficiary=beneficiary,
                appointment_date=appointment_date,
                start_time=time(int(start_hour), int((start_hour % 1) * 60)),
                end_time=time(int(end_hour), int((end_hour % 1) * 60)),
                appointment_type=random.choice([
                    'INTERVIEW', 'FOLLOW_UP', 'ADMINISTRATIVE', 'SOCIAL'
                ]),
                title=self.generate_appointment_title(),
                description=fake.sentence(nb_words=10),
                location="Association ONA" if random.choice([True, False]) else fake.address(),
                status=status,
                preparation_notes=fake.sentence() if random.choice([True, False]) else '',
                completion_notes=fake.paragraph() if status == 'COMPLETED' else '',
                created_by=calendar.volunteer.user,
            )
            appointments_created += 1

        return appointments_created

    def generate_appointment_title(self):
        """G√©n√®re des titres r√©alistes pour les rendez-vous"""
        titles = [
            "Premier entretien", "Suivi mensuel", "Aide administrative",
            "Renouvellement dossier", "Accompagnement social",
            "Point situation", "Aide d√©marches", "Entretien de suivi",
            "√âvaluation besoins", "Orientation services"
        ]
        return random.choice(titles)

    def create_interactions(self, beneficiaries, users):
        """Cr√©e des interactions entre b√©n√©voles et b√©n√©ficiaires"""
        interactions_count = 0

        # Filtrer les utilisateurs qui peuvent cr√©er des interactions
        eligible_users = [
            user for user in users
            if hasattr(user, 'volunteer_profile') and
            user.volunteer_profile.role in ['VOLUNTEER_INTERVIEW', 'EMPLOYEE', 'ADMIN']
        ]

        for beneficiary in beneficiaries:
            # Chaque b√©n√©ficiaire a entre 2 et 8 interactions
            num_interactions = random.randint(2, 8)

            for i in range(num_interactions):
                user = random.choice(eligible_users)

                # Date d'interaction (r√©partie sur plusieurs mois)
                interaction_date = fake.date_time_between(
                    start_date='-6M',
                    end_date='now'
                )

                interaction = Interaction.objects.create(
                    beneficiary=beneficiary,
                    user=user,
                    interaction_type=random.choice([
                        'ASSOCIATION', 'EXTERNAL', 'PHONE', 'HOME_VISIT', 'EMAIL'
                    ]),
                    title=self.generate_interaction_title(),
                    description=fake.paragraph(nb_sentences=3),
                    changes_made=fake.sentence() if random.choice([True, False]) else '',
                    follow_up_required=random.choice([True, False]),
                    follow_up_date=fake.date_between(
                        start_date='today',
                        end_date='+30d'
                    ) if random.choice([True, False]) else None,
                    follow_up_notes=fake.sentence() if random.choice([True, False]) else '',
                    created_at=interaction_date,
                )
                interactions_count += 1

        return interactions_count

    def generate_interaction_title(self):
        """G√©n√®re des titres r√©alistes pour les interactions"""
        titles = [
            "Entretien d'accueil", "Suivi situation financi√®re",
            "Aide constitution dossier", "Orientation vers partenaires",
            "Accompagnement d√©marches", "√âvaluation besoins",
            "Point situation logement", "Aide administrative",
            "Entretien t√©l√©phonique", "Visite de suivi"
        ]
        return random.choice(titles)